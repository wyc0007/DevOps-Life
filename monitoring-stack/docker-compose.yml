services:
  # ========================================
  # Prometheus 监控和数据采集
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    network_mode: ${NETWORK_MODE:-host}
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/config/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - ./prometheus/data:/prometheus
    user: "0:0"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ========================================
  # Node Exporter 系统指标收集
  # ========================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    network_mode: ${NETWORK_MODE:-host}
    pid: host
    volumes:
      - /:/host:ro,rslave
      - /etc/hostname:/etc/hostname:ro
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys)($|/)'
      - '--collector.netdev.device-exclude=^(veth.*|br.*|docker.*|virbr.*|lo)'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ========================================
  # ClickHouse 时序数据库 (官方最佳实践)
  # 参考: https://clickhouse.com/docs/zh/install/docker
  # ========================================
  clickhouse-server:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-server
    restart: always
    network_mode: ${NETWORK_MODE:-host}
    environment:
      - TZ=Asia/Shanghai
      - CLICKHOUSE_DB=prometheus
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - ./clickhouse/clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/clickhouse_logs:/var/log/clickhouse-server
    ulimits:
      nofile: 262144
      memlock: -1
    healthcheck:
      test: ["CMD", "clickhouse-server", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ========================================
  # Grafana 可视化服务
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    network_mode: ${NETWORK_MODE:-host}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - TZ=Asia/Shanghai
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    user: "0:0"
    depends_on:
      - clickhouse-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"